using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using eBotLib;
using eBotLib.Scenario;

namespace p8_eternatus_selection
{
    /// <summary>
    /// シナリオクラス
    /// </summary>
    public class Scenario: Template
    {
        /// <summary>
        /// ステータスチェック
        /// </summary>
        private enum STATUS_CHECK
        {
            NO_LABEL,
            MISS,
            MATCH
        }

        /// <summary>
        /// ヘルプメッセージ
        /// </summary>
        public override string HelpTipMessage
        {
            get
            {
                return "This is a scenario help message.\nAt a minimum, describe the intended use and conditions of use of the scenario.";
            }
        }
        
        /// <summary>
        /// テンプレート画像の保存フォルダ
        /// </summary>
        protected override string TemplateDirectory
        {
            get
            {
                return System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "\\templates";
            }
        }

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="capture">ビデオキャプチャ</param>
        /// <param name="titan">コントローラ</param>
        /// <param name="analysisPreview">プレビュー</param>
        public Scenario(eBotLib.Capture.DirectCapturePictureBox capture, TitanWrapper.Wrapper titan = null,
            AnalysisPreviewControl analysisPreview = null) : base(capture, titan, analysisPreview, 1000)
        {
        }

        /// <summary>
        /// テンプレートマッチング用パラメータの作成
        /// </summary>
        protected override void MakeMatchingParams()
        {
            SetTemplateMatchingParam("stslbl_a_normal", "stslbl_a_normal.bmp", 0.95, 600, 255, 148, 60);
            SetTemplateMatchingParam("stslbl_a_down", "stslbl_a_down.bmp", 0.95, 600, 255, 148, 60);
            SetTemplateMatchingParam("stslbl_a_up", "stslbl_a_up.bmp", 0.95, 600, 255, 148, 60);
            SetOCRMatchingParam("stsval_a", "", 622, 310, 103, 45, "eng", 7, "0123456789");
        }

        /// <summary>
        /// ステータスチェック
        /// </summary>
        /// <param name="template"></param>
        /// <param name="param"></param>
        /// <returns>結果</returns>
        private STATUS_CHECK statusCheck(string template, string param)
        {
            string stsValA;
            STATUS_CHECK ret;

            if (TemplateMatching(template))
            {
                OCRMatching("stsval_a", out stsValA, true);
                if (!stsValA.Equals(param))
                {
                    analysisPreview.Out(template + ": NG(" + stsValA + ")");
                    ret = STATUS_CHECK.MISS;
                }
                else
                {
                    analysisPreview.Out(template + ": OK(" + stsValA + ")");
                    ret = STATUS_CHECK.MATCH;
                }
            } else
            {
                ret = STATUS_CHECK.NO_LABEL;
            }

            return ret;
        }  

        /// <summary>
        /// シナリオ更新
        /// </summary>
        /// <remarks>INTERVAL周期でスナップショットを撮像しTickが実行される。</remarks>
        /// <returns>継続フラグ</returns>
        protected override bool Tick()
        {
            STATUS_CHECK status;

            if (STATUS_CHECK.NO_LABEL != (status = statusCheck("stslbl_a_normal", "107")))
            {
            }
            else if (STATUS_CHECK.NO_LABEL != (status = statusCheck("stslbl_a_up", "117")))
            {
            }
            else if (STATUS_CHECK.NO_LABEL != (status = statusCheck("stslbl_a_down", "107")))
            {
            }

            return true;
        }
    }
}
